{"version":3,"file":"static/js/752.94ce93b8.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    const RedirectComponent = (props) => {\r\n\r\n\r\n        if (!props.isAuth) return <Navigate to='/login' />\r\n\r\n        return <Component {...props} />\r\n\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__oMh4e\",\"posts\":\"MyPosts_posts__akUw3\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__TJtwx\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={'https://avatars.mds.yandex.net/i?id=d00a6fb936bd9fff05de6cabc7c4ccfc3d705469-8399918-images-thumbs&n=13'} alt=\"...\" />\r\n            {props.message}\r\n            <div><span>Like: {props.likesCount}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, { PureComponent } from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls'\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='postText'\r\n                    placeholder='Add new post'\r\n                    component={Textarea} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElement = props.posts.map(p => <Post message={p.post} likesCount={p.likesCount} key={p.id} />)\r\n    let addNewPost = (values) => {\r\n        let body = values.postText\r\n        props.addPostFunc(body)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostRedux onSubmit={addNewPost} />\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>)\r\n\r\n})\r\n\r\nconst AddNewPostRedux = reduxForm({ form: 'newPostText' })(AddNewPostForm)\r\n\r\nexport default MyPosts","import React from 'react'\r\nimport { addPostActionCreator, } from '../../../Redux/profile-reducer'\r\nimport MyPosts from './MyPosts'\r\nimport { connect } from \"react-redux\"\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPostFunc: (body) => {\r\n            dispatch(addPostActionCreator(body))\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__xBY7d\",\"userProfileAvatar\":\"ProfileInfo_userProfileAvatar__FnGsK\"};","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}><b>Status</b>: {props.status || 'The status is not set'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status} />\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport { Input, Textarea, createField } from '../../common/FormsControls/FormsControls'\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\nimport { reduxForm } from 'redux-form'\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div> <b>Name</b>: {createField('Name', 'fullName', [], Input)} </div>\r\n            <div> <b>About me</b>: {createField('About me', 'aboutMe', [], Input)}</div>\r\n            <div> <b>Looking for a job</b>: {createField('Looking for a job', 'lookingForAJob', [], Input, { type: 'checkbox' })}</div>\r\n            <div> <b>Professional skills</b>: {createField('Professional skills', 'lookingForAJobDescription', [], Textarea)}</div>\r\n            <div> <b>Contacts</b>: {Object.keys(profile.data.contacts).map(k => {\r\n                return <div key={k}>\r\n                    <b>{k}: {createField(k, 'contacts.' + k, [], Input)}</b>\r\n                </div>\r\n            })} </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'editProfile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, { useState } from 'react'\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport userPhoto from '../../../assest/img/user.jpeg'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({ profile, status, updateUserStatus, isOwner, savePhoto, saveProfile, ...props }) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(status)\r\n        // setTimeout(() => {\r\n        //     window.location.reload()\r\n        // }, 1000);\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const mainPhotoSelectedOn = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                deactivateEditMode()\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    let userProfilePhoto = profile.data.photos.small\r\n    return (\r\n\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.profileInfo}>\r\n                    <img className={s.userProfileAvatar} src={userProfilePhoto || userPhoto} alt='...' />\r\n                    {isOwner && <input type='file' onChange={mainPhotoSelectedOn} />}\r\n\r\n                    {editMode\r\n                        ? <ProfileDataForm profile={profile} onSubmit={onSubmit} initialValues={profile.data} />\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={activateEditMode} />\r\n                    }\r\n\r\n                    <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div> <b>Name</b>:  {profile.data.fullName}</div>\r\n            <div> <b>About me</b>: {profile.data.aboutMe}</div>\r\n            <div> <b>Looking for a job</b>: {profile.data.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div> <b>About job</b>: {profile.data.lookingForAJobDescription}</div>\r\n            <div> <b>Contacts</b>: {Object.keys(profile.data.contacts).map(k => {\r\n                return <Contact key={k} contactTitle={k} contactValue={profile.data.contacts[k]} />\r\n            })} </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                saveProfile={props.saveProfile} />\r\n            <MyPostsContainer profile={props.profile} />\r\n        </div>)\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile';\r\nimport { connect } from \"react-redux\";\r\nimport { useLocation, useNavigate, useParams, redirect } from \"react-router-dom\";\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile } from '../../Redux/profile-reducer';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../HOC/withAuthRedirect';\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                redirect('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return <Profile\r\n            {...this.props}\r\n            savePhoto={this.props.savePhoto}\r\n            isOwner={!this.props.router.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateUserStatus} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n\r\nexport default\r\n    compose(\r\n        connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile }),\r\n        withRouter,\r\n    )(ProfileContainer)"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","className","s","src","alt","message","likesCount","MyPosts","React","postsElement","posts","map","p","post","id","AddNewPostRedux","onSubmit","values","body","postText","addPostFunc","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","profilePage","newPostText","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateUserStatus","autoFocus","profile","error","createField","Input","type","Object","keys","data","contacts","k","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","savePhoto","saveProfile","Preloader","userProfilePhoto","photos","small","userPhoto","target","files","length","formData","then","initialValues","ProfileContainer","userId","this","router","params","authorizedUserId","redirect","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","updateStatus","compose","location","useLocation","navigate","useNavigate","useParams"],"sourceRoot":""}